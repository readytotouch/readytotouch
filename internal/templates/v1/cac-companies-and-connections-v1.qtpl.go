// Code generated by qtc from "cac-companies-and-connections-v1.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package v1

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func StreamCompaniesAndConnectionsV1(qw422016 *qt422016.Writer,
	headerProfiles []SocialProviderUser,
	authQueryParams string,
) {
	qw422016.N().S(`<!DOCTYPE html>
<html lang="en">

<head>
    <title>Companies & Connections</title>
    <meta name="description" content="Companies & Connections">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="author" type="text/plain" href="https://readytotouch.com/humans.txt"/>
    <meta property="og:image" content="/assets/images/og/organizers-light.jpg">

    `)
	streamfavicon(qw422016)
	qw422016.N().S(`
    `)
	streamorganizersFonts(qw422016)
	qw422016.N().S(`
    `)
	streamcompaniesAndConnectionsV1Styles(qw422016)
	qw422016.N().S(`
    `)
	streamplausibleAnalytics(qw422016)
	qw422016.N().S(`
    `)
	streamga(qw422016)
	qw422016.N().S(`
</head>
<body>
<header class="header">
	<div class="header__wrapper">
		<a href="/" class="header__logo">
			<img class="header__logo-img" src="/assets/images/pages/online/logo.svg" alt="ReadyToTouch logo">
			<h3 class="header__logo-title">ReadyToTouch</h3>
		</a>
        `)
	streamorganizersHeaderStars(qw422016)
	qw422016.N().S(`
        `)
	if len(headerProfiles) > 0 {
		qw422016.N().S(`
        `)
		streamorganizersHeaderProfile(qw422016, headerProfiles)
		qw422016.N().S(`
        `)
	} else {
		qw422016.N().S(`
        <a href="/organizers/golang/welcome`)
		qw422016.E().S(authQueryParams)
		qw422016.N().S(`" class="button button--small-padding button--bordered-gray header__login-button">Log in</a>
        `)
	}
	qw422016.N().S(`
    </div>
</header>

<main class="main-wrapper">
<div class="main-container main-container--connections">
	<h1 class="connections__title">Companies & Connections</h1>

	<section class="search">
        <h3 class="search__group-title">Add company to your list</h3>
        <div class="search__input-group-button">
            <label class="search__label" for="company-url">Company LinkedIn profile URL</label>
            <div class="search__input-button-group">
                <input class="search__input" id="company-url" type="text" placeholder="Enter company LinkedIn profile URL" list="company-url-list"/>
                <datalist id="company-url-list">
                    <option value="https://www.linkedin.com/company/google/">
                    <option value="https://www.linkedin.com/company/microsoft/">
                    <option value="https://www.linkedin.com/company/nvidia/">
                </datalist>
                <button id="add-company" class="button button--small-padding button--black">Add</button>
            </div>
        </div>
    </section>

    <div class="search-result mt-32">
        <div class="container">
            <div class="search-result__wrapper">
                <!-- filters -->
                <aside class="search-result__filters">
                    <div class="search-result__filter-group">
                        <div class="search-result__filter-header">
                            <h2 class="search-result__filter-headline">Connections settings</h2>
                        </div>

                        <div class="filters filters__with-footer">
                            <div class="filters__group">
                                <div class="filters__elements">
                                    <div class="textarea">
                                        <label for="keywords" class="textarea__label">
                                            Keywords
                                        </label>
                                        <textarea id="keywords" class="textarea__item textarea__item--filter" placeholder="Position title, level, or other keywords..."></textarea>
                                    </div>
                                </div>
                                <div class="filters__elements">
                                    <label for="location" class="textarea__label">
                                        Location
                                    </label>
                                    <select id="location" name="location" class="select select--filter">
                                        <option value="">Worldwide</option>
                                        <option value="105072130">Poland</option>
                                        <option value="101282230">Germany</option>
                                        <option value="106670623">Romania</option>
                                        <option value="105646813">Spain</option>
                                        <option value="104508036">Czechia</option>
                                        <option value="102105699">TÃ¼rkiye</option>
                                        <option value="100364837">Portugal</option>
                                        <option value="105333783">Bulgaria</option>
                                        <option value="103350119">Italy</option>
                                        <option value="106693272">Switzerland</option>
                                        <option value="103644278">United States</option>
                                        <option value="101165590">United Kingdom</option>
                                        <option value="101174742">Canada</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <button id="update-connections" class="button button--bordered-universe button--full">Update connections</button>
                    </div>
                </aside>
                <!-- /filters -->

                <div class="search-result--group">
                    <div id="search_result_list" class="search-result__list">
                        <p class="search-result-found"><span id="js-companies-count" class="search-result-found__amount">0</span> companies</p>
                        <div id="js-companies" class="search-result__cards row-gap-8 mt-24"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</main>

`)
	streamorganizersFooter(qw422016)
	qw422016.N().S(`
<script src="/assets/js/companies-and-connections-app.js?`)
	qw422016.N().D(appVersion)
	qw422016.N().S(`"></script>
</body>
</html>
`)
}

func WriteCompaniesAndConnectionsV1(qq422016 qtio422016.Writer,
	headerProfiles []SocialProviderUser,
	authQueryParams string,
) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamCompaniesAndConnectionsV1(qw422016, headerProfiles, authQueryParams)
	qt422016.ReleaseWriter(qw422016)
}

func CompaniesAndConnectionsV1(
	headerProfiles []SocialProviderUser,
	authQueryParams string,
) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteCompaniesAndConnectionsV1(qb422016, headerProfiles, authQueryParams)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
