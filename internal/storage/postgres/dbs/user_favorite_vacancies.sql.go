// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_favorite_vacancies.sql

package dbs

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const userFavoriteVacancies = `-- name: UserFavoriteVacancies :many
SELECT ufv.vacancy_id
FROM user_favorite_vacancies ufv
WHERE ufv.user_id = $1
  AND ($2::BOOLEAN = FALSE OR ufv.vacancy_id = ANY ($3::BIGINT[]))
  AND ufv.favorite = TRUE
`

type UserFavoriteVacanciesParams struct {
	UserID                 int64
	VacancyIdsFilterExists bool
	VacancyIds             []int64
}

func (q *Queries) UserFavoriteVacancies(ctx context.Context, arg UserFavoriteVacanciesParams) ([]int64, error) {
	rows, err := q.query(ctx, q.userFavoriteVacanciesStmt, userFavoriteVacancies, arg.UserID, arg.VacancyIdsFilterExists, pq.Array(arg.VacancyIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var vacancy_id int64
		if err := rows.Scan(&vacancy_id); err != nil {
			return nil, err
		}
		items = append(items, vacancy_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFavoriteVacanciesUpsert = `-- name: UserFavoriteVacanciesUpsert :exec
INSERT INTO user_favorite_vacancies AS t (user_id, vacancy_id, favorite, created_at, updated_at)
VALUES ($1, $2, $3, $4, $4)
ON CONFLICT (user_id, vacancy_id)
    DO UPDATE
    SET favorite   = excluded.favorite,
        updated_at = excluded.updated_at
WHERE t.favorite <> excluded.favorite
`

type UserFavoriteVacanciesUpsertParams struct {
	UserID    int64
	VacancyID int64
	Favorite  bool
	CreatedAt time.Time
}

func (q *Queries) UserFavoriteVacanciesUpsert(ctx context.Context, arg UserFavoriteVacanciesUpsertParams) error {
	_, err := q.exec(ctx, q.userFavoriteVacanciesUpsertStmt, userFavoriteVacanciesUpsert,
		arg.UserID,
		arg.VacancyID,
		arg.Favorite,
		arg.CreatedAt,
	)
	return err
}
