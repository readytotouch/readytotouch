// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_feature_waitlist.sql

package dbs

import (
	"context"
	"time"
)

const userFeatureWaitlist = `-- name: UserFeatureWaitlist :one
SELECT active
FROM user_feature_waitlist
WHERE user_id = $1
  AND feature = $2
`

type UserFeatureWaitlistParams struct {
	UserID  int64
	Feature FeatureWait
}

func (q *Queries) UserFeatureWaitlist(ctx context.Context, arg UserFeatureWaitlistParams) (bool, error) {
	row := q.queryRow(ctx, q.userFeatureWaitlistStmt, userFeatureWaitlist, arg.UserID, arg.Feature)
	var active bool
	err := row.Scan(&active)
	return active, err
}

const userFeatureWaitlistDailyStats = `-- name: UserFeatureWaitlistDailyStats :many
WITH aggs AS (
    SELECT created_at::DATE AS day,
           COUNT(*)         AS subscriber_count
    FROM user_feature_waitlist
    WHERE feature = $3
      AND created_at::DATE >= $1::DATE
    GROUP BY day
)
SELECT days.day::DATE                             AS day,
       COALESCE(aggs.subscriber_count, 0)::BIGINT AS subscriber_count
FROM GENERATE_SERIES(
    $1::DATE,
    $2::DATE,
    '1 DAY'::INTERVAL
) AS days (day)
    LEFT JOIN aggs ON (days.day = aggs.day)
ORDER BY days.day
`

type UserFeatureWaitlistDailyStatsParams struct {
	From    time.Time
	To      time.Time
	Feature FeatureWait
}

type UserFeatureWaitlistDailyStatsRow struct {
	Day             time.Time
	SubscriberCount int64
}

func (q *Queries) UserFeatureWaitlistDailyStats(ctx context.Context, arg UserFeatureWaitlistDailyStatsParams) ([]UserFeatureWaitlistDailyStatsRow, error) {
	rows, err := q.query(ctx, q.userFeatureWaitlistDailyStatsStmt, userFeatureWaitlistDailyStats, arg.From, arg.To, arg.Feature)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFeatureWaitlistDailyStatsRow
	for rows.Next() {
		var i UserFeatureWaitlistDailyStatsRow
		if err := rows.Scan(&i.Day, &i.SubscriberCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFeatureWaitlistStats = `-- name: UserFeatureWaitlistStats :one
SELECT user_count
FROM user_feature_waitlist_stats
WHERE feature = $1
`

func (q *Queries) UserFeatureWaitlistStats(ctx context.Context, feature FeatureWait) (int64, error) {
	row := q.queryRow(ctx, q.userFeatureWaitlistStatsStmt, userFeatureWaitlistStats, feature)
	var user_count int64
	err := row.Scan(&user_count)
	return user_count, err
}

const userFeatureWaitlistStatsUpsert = `-- name: UserFeatureWaitlistStatsUpsert :exec
INSERT INTO user_feature_waitlist_stats AS ufws (feature, user_count)
VALUES ($1, $2)
ON CONFLICT (feature) DO UPDATE
    SET user_count = ufws.user_count + excluded.user_count
`

type UserFeatureWaitlistStatsUpsertParams struct {
	Feature   FeatureWait
	UserCount int64
}

func (q *Queries) UserFeatureWaitlistStatsUpsert(ctx context.Context, arg UserFeatureWaitlistStatsUpsertParams) error {
	_, err := q.exec(ctx, q.userFeatureWaitlistStatsUpsertStmt, userFeatureWaitlistStatsUpsert, arg.Feature, arg.UserCount)
	return err
}

const userFeatureWaitlistUpsert = `-- name: UserFeatureWaitlistUpsert :execrows
INSERT INTO user_feature_waitlist AS ufw (user_id, feature, active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $4)
ON CONFLICT (user_id, feature) DO UPDATE
    SET active     = excluded.active,
        updated_at = excluded.updated_at
WHERE ufw.active <> excluded.active
`

type UserFeatureWaitlistUpsertParams struct {
	UserID    int64
	Feature   FeatureWait
	Active    bool
	CreatedAt time.Time
}

func (q *Queries) UserFeatureWaitlistUpsert(ctx context.Context, arg UserFeatureWaitlistUpsertParams) (int64, error) {
	result, err := q.exec(ctx, q.userFeatureWaitlistUpsertStmt, userFeatureWaitlistUpsert,
		arg.UserID,
		arg.Feature,
		arg.Active,
		arg.CreatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
